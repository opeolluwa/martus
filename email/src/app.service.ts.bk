import { MailerService } from '@nestjs-modules/mailer';
import {
  Injectable,
  OnApplicationShutdown,
  OnModuleInit,
} from '@nestjs/common';
import {
  Consumer,
  ConsumerRunConfig,
  ConsumerSubscribeTopics,
  Kafka,
} from 'kafkajs';

@Injectable()
export class AppService implements OnApplicationShutdown {
  constructor(private readonly mailerService: MailerService) {}

  private readonly kafka = new Kafka({
    brokers: [process.env.KAFKA_HOST || 'localhost:9092'],
  });

  private readonly consumer: Consumer;

  async sendEmail() {
    /* const consumer = this.kafka.consumer({ groupId: 'martus' });
    await consumer.connect();
    await consumer.subscribe({ topics: ['email-queue'] });
    await consumer.run({
      eachMessage: async ({ topic, partition, message }) => {
        console.log({
          value: message.value.toString(),
        });
      },
    }); */
    await this.mailerService
      .sendMail({
        // to: recipient, // the receiver email, parsed from the job.data
        // from: '"Easepay" <info@easepay.io>', // sender address
        // subject: emailSubject, // Subject line
        // template: emailTemplate, // the email template to use  eg welcome, sign up, forgotten-password
        // context: {
        // fullname: data?.fullname || data?.name, // if the email require email
        // token: data?.token, // if the email contain JWT or OTP
        // unsubscribeLink, // link to unsubscribe from emails
        // contactUsPage, // contact up page link
        // data, // make the rest of the data accessible in the template as data[field]
        // }, // data to be used to saturate the template
      })
      .catch((error) => {
        throw new Error(error);
      });
  }

  async onApplicationShutdown() {
    await this.consumer.disconnect();
  }
}
